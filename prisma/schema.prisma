// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  username            String?
  email               String?               @unique
  password            String?
  phoneNumber         String?
  address             String?
  role                Role?
  status              StatusUser            @default(INIT)
  gender              Gender?
  dateOfBirth         DateTime?             @db.Date
  avatar              String?
  isActive            Boolean               @default(true)
  provider            String?
  auth                Auth?
  salesman            Salesman?
  purchaser           Purchaser?
  conversation        Conversation[]
  participant         Participant[]
  message             Message[]
  deletedConversation DeletedConversation[]
  isAccessChatbot     Boolean                     @default(false)
}

enum Role {
  ADMIN
  MANAGER
  SALESMAN
  PURCHASER
}

enum StatusUser {
  INIT
  BANNED
  VERIFIED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Auth {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  hashedRefreshToken String?
  userId             String   @unique @db.ObjectId
  user               User     @relation(fields: [userId], references: [id])
}

model Salesman {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Purchaser {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Conversation {
  id                  String                      @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  updatedAt           DateTime                    @updatedAt
  createdAt           DateTime                    @default(now())
  type                TypeConversation            @default(PRIVATE)
  isBot               Boolean                     @default(false)
  creator             User                        @relation(fields: [creatorId], references: [id])
  creatorId           String                      @db.ObjectId
  deletedConversation DeletedConversation?
  participant         ParticipantInConversation[]
  message             Message[]
}

enum TypeConversation {
  PRIVATE
  GROUP
  ANONYMOUS
}

model ParticipantInConversation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  participantId  String       @db.ObjectId
  conversationId String       @db.ObjectId
  participant    Participant  @relation(fields: [participantId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@unique([participantId, conversationId])
}

model Participant {
  id           String                      @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt    DateTime                    @updatedAt
  createdAt    DateTime                    @default(now())
  memberRole   MemberRole                  @default(MEMBER)
  user         User                        @relation(fields: [userId], references: [id])
  userId       String                      @db.ObjectId
  conversation ParticipantInConversation[]
}

model Message {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  message           String
  chatBotMessage    String?
  messageStatus     MessageStatus       @default(SENDING)
  updatedAt         DateTime            @updatedAt
  createdAt         DateTime            @default(now())
  deletedAt         DateTime?
  conversation      Conversation        @relation(fields: [conversationId], references: [id])
  conversationId    String              @db.ObjectId
  deletedMessage    DeletedMessage?
  sender            User                @relation(fields: [senderId], references: [id])
  senderId          String              @db.ObjectId
  attachmentMessage AttachmentMessage[]
}

enum MessageStatus {
  SENDING
  SEND
  FAILED
}

enum MemberRole {
  MEMBER
  ADMIN
}

model DeletedConversation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @unique @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
}

model DeletedMessage {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  message   Message @relation(fields: [messageId], references: [id])
  messageId String  @unique @db.ObjectId
}

model AttachmentMessage {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  thumbnailUrl String
  fileUrl      String
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
  message      Message  @relation(fields: [messageId], references: [id])
  messageId    String   @db.ObjectId
}
